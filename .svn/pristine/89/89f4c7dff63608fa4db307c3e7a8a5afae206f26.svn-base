import React, {useEffect, useState} from 'react';
import {ITEM_LAYOUT, REQUIRED} from '../../../../settings/constants';
import {Radio} from 'antd';
import {
  Button,
  Modal,
  Input,
  Textarea,
} from '../../../../components/uielements/exportComponent';
import {InputFormatSpecific} from '../../../../components/uielements/exportComponent';
import {customizeItemValidator as Item} from '../../../../components/uielements/itemValidator';
import {
  customizeFormValidator as Form,
  useForm,
} from '../../../../components/uielements/formValidator';
export default (props) => {
  const [form] = useForm();
  const [isFormSuccess, setIsFormSuccess] = useState(true);
  const {dataEdit, loading, visible, action} = props;
  const [selectedButton, setselectedButton] = useState([]);
  console.log(dataEdit);
  useEffect(() => {
    if (dataEdit && dataEdit.ID) {
      form &&
        form.setFieldsValue({
          ...dataEdit,
          TrangThai: dataEdit.TrangThai ? 1 : 0,
        });
      const initialGhiChu = dataEdit.GhiChu;
      if (initialGhiChu) {
        const selectedButton = initialGhiChu.split(',').map(Number);
        setselectedButton(selectedButton);
      }
    }
  }, []);
  const onChange = (e) => {
    console.log(`radio = ${e.target.value}`);
  };
  const onOk = async (e) => {
    e.preventDefault();
    const value = await form.validateFields();
    props.onCreate({
      ...value,
      Loai: 2,
      TrangThai: Boolean(value.TrangThai),
    });
  };
  const handleChangedFields = async (changedValues, allValues) => {
    const value = await form.getFieldsValue();
    const {Ten} = value;
    if (Ten) {
      setIsFormSuccess(false);
    } else {
      setIsFormSuccess(true);
    }
  };

  const handleButtonClick = (index) => {
    setselectedButton((prevselectedButton) => {
      const isSelected = prevselectedButton.includes(index);
      let updatedButtons;

      if (isSelected) {
        updatedButtons = prevselectedButton.filter((btn) => btn !== index);
      } else {
        updatedButtons = [...prevselectedButton, index];
      }
      updatedButtons.sort((a, b) => a - b);
      form.setFieldsValue({
        GhiChu: `${updatedButtons.join(', ')}`,
      });

      return updatedButtons;
    });
  };

  const renderButtons = () => {
    const buttons = [];
    for (let i = 1; i <= 12; i++) {
      buttons.push(
        <button
          key={i}
          style={{
            width: '46px',
            backgroundColor: selectedButton.includes(i) ? '#F2F8FF' : 'white',
            border: '1px solid gray',
            borderRadius: '5px',
            marginRight: '2px',
          }}
          onClick={() => handleButtonClick(i)}
        >
          {i}
        </button>,
      );
    }
    return buttons;
  };
  return (
    <Modal
      title={`${action === 'edit' ? 'SỬA' : 'THÊM'} KỲ BÁO CÁO`}
      width={650}
      visible={visible}
      onCancel={props.onCancel}
      footer={[
        <Button key="back" onClick={props.onCancel}>
          Hủy
        </Button>,
        <Button
          key="submit"
          htmlType="submit"
          type="primary"
          form="FormKyBaoCao"
          loading={loading}
          onClick={onOk}
          // disabled={isFormSuccess}
        >
          Lưu
        </Button>,
      ]}
    >
      <Form form={form} name={'FormKyBaoCao'} onChange={handleChangedFields}>
        {action === 'edit' ? <Item name={'ID'} hidden /> : ''}
        <Item
          label="Tên Thời Gian"
          name={'Ten'}
          {...ITEM_LAYOUT}
          rules={[REQUIRED]}
        >
          <Input />
        </Item>
        <Item
          name="GhiChu"
          label="Chọn thời gian (Tháng)"
          {...ITEM_LAYOUT}
          rules={[REQUIRED]}
        ></Item>
        {renderButtons()}
        <Item
          label="Đang sử dụng"
          name={'TrangThai'}
          {...ITEM_LAYOUT}
          rules={[REQUIRED]}
        >
          <Radio.Group name="radiogroup" onChange={onChange}>
            <Radio value={1}>Có</Radio>
            <Radio value={0}>Không</Radio>
          </Radio.Group>
        </Item>
      </Form>
    </Modal>
  );
};
